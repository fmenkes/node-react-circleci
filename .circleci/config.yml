version: 2
jobs:
  react-unit:
    docker:
      - image: fmenkes/node-alpine:8.9.4
    working_directory: ~/project/frontend
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          keys:
            - yarn-cache-frontend-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-cache-frontend-{{ .Branch }}-
            - yarn-cache-frontend-
      - run:
          name: Install dependencies
          command: yarn
      - save_cache:
          key: yarn-cache-frontend-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - node_modules/
      - run:
          name: Run eslint
          command: yarn lint -o reports/eslint.xml -f junit src
      - run:
          name: Run unit tests with coverage
          command: yarn test --coverage
      - store_test_results:
          path: reports
      - store_artifacts:
          path: reports
      - store_artifacts:
          path: coverage
      - persist_to_workspace:
          root: ~/project
          paths: frontend

  react-build:
    docker:
      - image: fmenkes/node-alpine:8.9.4
    working_directory: ~/project/frontend
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Append variables to .env file
          command: |
            echo "REACT_APP_STAGING_URL=${STAGING_URL}" >> .env
      - run:
          name: Build React app
          command: yarn build
      - persist_to_workspace:
          root: ~/project
          paths: frontend/build

  node-unit:
    docker:
      - image: fmenkes/node-alpine:8.9.4
    working_directory: ~/project/backend
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          keys: 
            - yarn-cache-backend-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-cache-backend-{{ .Branch }}-
            - yarn-cache-backend-
      - run:
          name: Install dependencies
          command: yarn
      - save_cache:
          key: yarn-cache-backend-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - node_modules/
      - run:
          name: Run eslint
          command: yarn lint -o reports/eslint.xml -f junit .
      - run:
          name: Run unit tests with coverage
          command: yarn test:unit
      - store_test_results:
          path: reports
      - store_artifacts:
          path: reports
      - store_artifacts:
          path: coverage

  node-integration:
    docker:
      - image: fmenkes/docker-compose-git
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build backend Docker image
          command: |
            docker build --cache-from=$DOCKER_IMAGE -t $DOCKER_IMAGE ./backend
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar $DOCKER_IMAGE
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      - run: 
          name: Create test directory
          command: mkdir reports
      - run:
          name: Run tests
          command: docker-compose -f .circleci/node/docker-compose.yml up --abort-on-container-exit
      - run:
          name: Copy test results to artifact folder
          command: docker cp web:${WORKING_DIRECTORY}/reports/junit.xml reports/junit.xml
          when: always
      - run:
          name: Login to Docker Hub
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
            fi
      - run:
          name: Push image to Docker Hub
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker push $DOCKER_IMAGE
            fi
      - store_test_results:
          path: reports
      - store_artifacts:
          path: reports

  staging:
    docker:
      - image: fmenkes/ansible-git
    environment:
      - ANSIBLE_HOST_KEY_CHECKING: "False"
    working_directory: ~/project
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Append variables to host_vars file
          command: |
            echo "working_directory: ${WORKING_DIRECTORY}
            docker_image: ${DOCKER_IMAGE}
            ansible_host: ${STAGING_URL}
            ansible_user: ${BACKEND_STAGING_ANSIBLE_USER}
            DOCKER_USER: ${DOCKER_USER}
            DOCKER_PASSWORD: ${DOCKER_PASSWORD}" >> devops/environments/staging/host_vars/$ANSIBLE_HOSTNAME
      - run: 
          name: Run Ansible playbook
          command: ansible-playbook -i devops/environments/staging/inventory.yml devops/site.yml
    
  deploy:
    docker:
      - image: fmenkes/ansible-git
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: Append variables to host_vars file
          command: |
            echo "working_directory: ${WORKING_DIRECTORY}
            docker_image: ${DOCKER_IMAGE}
            ansible_host: ${PRODUCTION_URL}
            DOCKER_USER: ${DOCKER_USER}
            DOCKER_PASSWORD: ${DOCKER_PASSWORD}" >> devops/environments/production/host_vars/$ANSIBLE_HOSTNAME
      - run: 
          name: Run Ansible playbook
          command: ansible-playbook -i devops/environments/production/inventory.yml devops/site.yml
      - persist_to_workspace:
          root: .
          paths: .

  smoke-test:
    docker:
      - image: fmenkes/ansible-git
    working_directory: ~/circleci
    steps:
      - attach_workspace:
          at: ~/circleci
      - run:
          name: Smoke test
          command: '[ "$(eval curl -L -s -o /dev/null -w "%{http_code}" ${PRODUCTION_URL})" -eq "200" ]'
          no_output_timeout: "15s"
      - run:
          name: Rollback
          command: |
            git checkout HEAD~1
            ansible-playbook -i devops/environments/production/inventory.yml devops/site.yml
          when: on_fail
  
workflows:
  version: 2
  circleci:
    jobs:
      - node-unit
      - react-unit
      - node-integration:
          requires:
            - node-unit
      - react-build:
          requires:
            - react-unit
      - staging:
          requires:
            - node-integration
            - react-build
          filters:
            branches:
              only: master
      - release:
          type: approval
          requires:
            - node-integration
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - release
      - smoke-test:
          requires:
            - deploy